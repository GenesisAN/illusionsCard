package Base

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MapSArrayInterface) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0004 uint32
	zb0004, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(MapSArrayInterface, zb0004)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0004 > 0 {
		zb0004--
		var zb0001 string
		var zb0002 []interface{}
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0005 uint32
		zb0005, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if cap(zb0002) >= int(zb0005) {
			zb0002 = (zb0002)[:zb0005]
		} else {
			zb0002 = make([]interface{}, zb0005)
		}
		for zb0003 := range zb0002 {
			zb0002[zb0003], err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0003)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z MapSArrayInterface) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0006, zb0007 := range z {
		err = en.WriteString(zb0006)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteArrayHeader(uint32(len(zb0007)))
		if err != nil {
			err = msgp.WrapError(err, zb0006)
			return
		}
		for zb0008 := range zb0007 {
			err = en.WriteIntf(zb0007[zb0008])
			if err != nil {
				err = msgp.WrapError(err, zb0006, zb0008)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z MapSArrayInterface) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0006, zb0007 := range z {
		o = msgp.AppendString(o, zb0006)
		o = msgp.AppendArrayHeader(o, uint32(len(zb0007)))
		for zb0008 := range zb0007 {
			o, err = msgp.AppendIntf(o, zb0007[zb0008])
			if err != nil {
				err = msgp.WrapError(err, zb0006, zb0008)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MapSArrayInterface) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(MapSArrayInterface, zb0004)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0004 > 0 {
		var zb0001 string
		var zb0002 []interface{}
		zb0004--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0005 uint32
		zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if cap(zb0002) >= int(zb0005) {
			zb0002 = (zb0002)[:zb0005]
		} else {
			zb0002 = make([]interface{}, zb0005)
		}
		for zb0003 := range zb0002 {
			zb0002[zb0003], bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0003)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z MapSArrayInterface) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0006, zb0007 := range z {
			_ = zb0007
			s += msgp.StringPrefixSize + len(zb0006) + msgp.ArrayHeaderSize
			for zb0008 := range zb0007 {
				s += msgp.GuessSize(zb0007[zb0008])
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResolveInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ModID":
			z.GUID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GUID")
				return
			}
		case "Slot":
			z.Slot, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Slot")
				return
			}
		case "LocalSlot":
			z.LocalSlot, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LocalSlot")
				return
			}
		case "Property":
			z.Property, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Property")
				return
			}
		case "CategoryNo":
			z.CategoryNo, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "CategoryNo")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ResolveInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ModID"
	err = en.Append(0x85, 0xa5, 0x4d, 0x6f, 0x64, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.GUID)
	if err != nil {
		err = msgp.WrapError(err, "GUID")
		return
	}
	// write "Slot"
	err = en.Append(0xa4, 0x53, 0x6c, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Slot)
	if err != nil {
		err = msgp.WrapError(err, "Slot")
		return
	}
	// write "LocalSlot"
	err = en.Append(0xa9, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LocalSlot)
	if err != nil {
		err = msgp.WrapError(err, "LocalSlot")
		return
	}
	// write "Property"
	err = en.Append(0xa8, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Property)
	if err != nil {
		err = msgp.WrapError(err, "Property")
		return
	}
	// write "CategoryNo"
	err = en.Append(0xaa, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt(z.CategoryNo)
	if err != nil {
		err = msgp.WrapError(err, "CategoryNo")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ResolveInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ModID"
	o = append(o, 0x85, 0xa5, 0x4d, 0x6f, 0x64, 0x49, 0x44)
	o = msgp.AppendString(o, z.GUID)
	// string "Slot"
	o = append(o, 0xa4, 0x53, 0x6c, 0x6f, 0x74)
	o = msgp.AppendInt(o, z.Slot)
	// string "LocalSlot"
	o = append(o, 0xa9, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74)
	o = msgp.AppendInt(o, z.LocalSlot)
	// string "Property"
	o = append(o, 0xa8, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79)
	o = msgp.AppendString(o, z.Property)
	// string "CategoryNo"
	o = append(o, 0xaa, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x6f)
	o = msgp.AppendInt(o, z.CategoryNo)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResolveInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ModID":
			z.GUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GUID")
				return
			}
		case "Slot":
			z.Slot, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Slot")
				return
			}
		case "LocalSlot":
			z.LocalSlot, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LocalSlot")
				return
			}
		case "Property":
			z.Property, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Property")
				return
			}
		case "CategoryNo":
			z.CategoryNo, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CategoryNo")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ResolveInfo) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.GUID) + 5 + msgp.IntSize + 10 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Property) + 11 + msgp.IntSize
	return
}
